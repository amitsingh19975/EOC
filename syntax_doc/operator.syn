//////////////////////////// Custom operator 1 /////////////////////////
operator (+) {
    precedence: 2,
    type: .infix
}

let a = 1 + 2; // Ok
let b = +1; // Error
let c = 1+; // Error

//////////////////////////////////////////////////////////////////////

//////////////////////////// Custom operator 2 /////////////////////////
operator (+) {
    precedence: 2,
    type: [.infix, .prefix]
}

let a = 1 + 2; // Ok
let b = +1; // Ok
let c = 1+; // Error

//////////////////////////////////////////////////////////////////////

//////////////////////////// Custom operator 3 /////////////////////////
operator (+) {
    precedence: 2,
    type: [.infix, .prefix]
}

fn (+) (a: i32, b: i32) -> i32 { ... } // or fn (+).infix (a: i32, b: i32) -> i32 { ... }

fn (+).prefix (a: i32) -> i32 { return a; }

let a = (+).prefix(1); // = +1;
let b = (+).infix(1, 2); // = 1 + 2;

//////////////////////////////////////////////////////////////////////

//////////////////////////// Custom operator 4 /////////////////////////
operator (i32) {
    precedence: 0,
    type: .postfix
}

fn (i32) (a: ExpressibleByInteger<32>) -> Int32 { return a.into(); }

let a = 1i32; // Ok

//////////////////////////////////////////////////////////////////////
